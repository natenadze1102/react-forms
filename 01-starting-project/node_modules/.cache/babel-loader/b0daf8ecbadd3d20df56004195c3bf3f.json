{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\G.Natenadze\\\\Desktop\\\\react11\\\\react-forms\\\\01-starting-project\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const i = useRef(null); // const [enteredName, setEnteredName] = useState(\"\");\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  const enteredNameIsValid = x => {\n    return x.trim() !== \"\";\n  };\n\n  const enteredEmailIsValid = inputEmail => {\n    inputEmail.includes('@');\n  };\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    reset: resetInput\n  } = useInput(enteredNameIsValid);\n  console.log(enteredName, nameInputHasError, nameChangeHandler, nameInputBlurHandler);\n  const {\n    value: inputEmail,\n    hasError: emailInputIsInvalid,\n    valueChangeHandler: inputEmailHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    reset: resetEmail\n  } = useInput(enteredEmailIsValid); // const [emailInputIsTouched, setEmailInputIsTouched] = useState(false);\n  // const [inputEmail, setInputEmail] = useState(\"\")\n  // const enteredEmailIsValid = inputEmail.includes('@');\n  // const nameInputHasError = !enteredNameIsValid && enteredNameTouched;\n  // const emailInputIsInvalid = !enteredEmailIsValid && emailInputIsTouched;\n\n  let formIsValid = enteredNameIsValid && enteredEmailIsValid; // const nameChangeHandler = (e) => {\n  //   setEnteredName(e.target.value)\n  // };\n  // const inputEmailHandler = (e) => {\n  //   setInputEmail(e.target.value);\n  //   setEmailInputIsTouched(true);\n  // }\n  // const nameInputBlurHandler = () => {\n  //   setEnteredNameTouched(true);\n  // };\n  // const emailInputBlurHandler = () => {\n  //   setEmailInputIsTouched(true);\n  // }\n\n  const formSubmitHandler = e => {\n    e.preventDefault();\n    setEnteredNameTouched(true);\n    setEmailInputIsTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      return;\n    }\n\n    resetInput();\n    resetEmail();\n  };\n\n  const nameInputClasses = !nameInputHasError ? \"form-control\" : \"form-control invalid\";\n  const emailInputClasses = !emailInputIsInvalid ? \"form-control\" : \"form-control invalid\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: i,\n        onChange: nameChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\\"Name must not be empty\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 29\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: inputEmailHandler,\n        onBlur: emailInputBlurHandler,\n        value: inputEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\\"Email must not be empty\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        className: !formIsValid ? 'disabled' : '',\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: enteredName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"lnASObr3k8G9xn96uR4siy9NUsU=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["React","useRef","useState","useInput","SimpleInput","props","i","enteredNameIsValid","x","trim","enteredEmailIsValid","inputEmail","includes","value","enteredName","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameInputBlurHandler","reset","resetInput","console","log","emailInputIsInvalid","inputEmailHandler","emailInputBlurHandler","resetEmail","formIsValid","formSubmitHandler","e","preventDefault","setEnteredNameTouched","setEmailInputIsTouched","nameInputClasses","emailInputClasses"],"sources":["C:/Users/G.Natenadze/Desktop/react11/react-forms/01-starting-project/src/components/SimpleInput.js"],"sourcesContent":["import React, { useRef, useState } from \"react\";\r\nimport useInput from \"../hooks/use-input\";\r\n\r\nconst SimpleInput = (props) => {\r\n  const i = useRef(null);\r\n  // const [enteredName, setEnteredName] = useState(\"\");\r\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\r\n  const enteredNameIsValid = (x) => {\r\n    return x.trim() !== \"\";\r\n  }\r\n\r\n  const enteredEmailIsValid = (inputEmail) => {\r\n    inputEmail.includes('@');\r\n  }\r\n\r\n  const { value: enteredName, hasError: nameInputHasError, valueChangeHandler: nameChangeHandler, inputBlurHandler: nameInputBlurHandler, reset: resetInput } = useInput(enteredNameIsValid);\r\n  console.log(enteredName, nameInputHasError, nameChangeHandler, nameInputBlurHandler)\r\n  const { value: inputEmail, hasError: emailInputIsInvalid, valueChangeHandler: inputEmailHandler, inputBlurHandler: emailInputBlurHandler, reset: resetEmail } = useInput(enteredEmailIsValid);\r\n\r\n  // const [emailInputIsTouched, setEmailInputIsTouched] = useState(false);\r\n  // const [inputEmail, setInputEmail] = useState(\"\")\r\n\r\n  // const enteredEmailIsValid = inputEmail.includes('@');\r\n\r\n  // const nameInputHasError = !enteredNameIsValid && enteredNameTouched;\r\n  // const emailInputIsInvalid = !enteredEmailIsValid && emailInputIsTouched;\r\n\r\n  let formIsValid = enteredNameIsValid && enteredEmailIsValid;\r\n\r\n  // const nameChangeHandler = (e) => {\r\n\r\n  //   setEnteredName(e.target.value)\r\n\r\n  // };\r\n\r\n  // const inputEmailHandler = (e) => {\r\n  //   setInputEmail(e.target.value);\r\n  //   setEmailInputIsTouched(true);\r\n  // }\r\n\r\n\r\n  // const nameInputBlurHandler = () => {\r\n  //   setEnteredNameTouched(true);\r\n  // };\r\n\r\n  // const emailInputBlurHandler = () => {\r\n  //   setEmailInputIsTouched(true);\r\n\r\n  // }\r\n\r\n  const formSubmitHandler = (e) => {\r\n    e.preventDefault();\r\n\r\n\r\n    setEnteredNameTouched(true);\r\n    setEmailInputIsTouched(true);\r\n\r\n\r\n    if (enteredName.trim() === \"\") {\r\n      return;\r\n    }\r\n\r\n    resetInput();\r\n    resetEmail();\r\n  };\r\n\r\n  const nameInputClasses = !nameInputHasError\r\n    ? \"form-control\"\r\n    : \"form-control invalid\";\r\n\r\n  const emailInputClasses = !emailInputIsInvalid\r\n    ? \"form-control\"\r\n    : \"form-control invalid\";\r\n\r\n  return (\r\n    <form onSubmit={formSubmitHandler}>\r\n      <div className={nameInputClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          ref={i}\r\n          onChange={nameChangeHandler}\r\n          onBlur={nameInputBlurHandler}\r\n          value={enteredName}\r\n        />\r\n      </div>\r\n      {nameInputHasError && <p>\"Name must not be empty\"</p>}\r\n\r\n      <div className={emailInputClasses}>\r\n        <label htmlFor=\"email\">Your Email</label>\r\n        <input\r\n          type=\"email\"\r\n          id=\"email\"\r\n          onChange={inputEmailHandler}\r\n          onBlur={emailInputBlurHandler}\r\n          value={inputEmail}\r\n        />\r\n      </div>\r\n      {emailInputIsInvalid && <p>\"Email must not be empty\"</p>}\r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid} className={!formIsValid ? 'disabled' : ''}>Submit</button>\r\n      </div>\r\n      <div>{enteredName}</div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}